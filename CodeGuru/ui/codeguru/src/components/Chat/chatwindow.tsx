/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/OWY6mrfyv7w
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useRef, useEffect, JSX, SVGProps} from "react"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/components/ui/button"

export function ChatWindow() {
  const [messages, setMessages] = useState([
    {
      id: 1,
      sender: {
        name: "John Doe",
        avatar: "/placeholder-user.jpg",
      },
      type: "text",
      content: "Hey, how are you doing?",
      timestamp: "2:39 PM",
    },
    {
      id: 2,
      sender: {
        name: "Jane Smith",
        avatar: "/placeholder-user.jpg",
      },
      type: "image",
      content: "/placeholder.svg?height=200&width=300",
      timestamp: "2:41 PM",
    },
    {
      id: 3,
      sender: {
        name: "Bob Johnson",
        avatar: "/placeholder-user.jpg",
      },
      type: "file",
      content: {
        name: "important_document.pdf",
        size: "2.3 MB",
      },
      timestamp: "2:45 PM",
    },
    {
      id: 4,
      sender: {
        name: "John Doe",
        avatar: "/placeholder-user.jpg",
      },
      type: "text",
      content: "Doing great, thanks for asking!",
      timestamp: "2:47 PM",
    },
  ])
  const [newMessage, setNewMessage] = useState("")
  const messagesEndRef = useRef(null)
  const handleSendMessage = () => {
    if (newMessage.trim()) {
      const newMessageObj = {
        id: messages.length + 1,
        sender: {
          name: "You",
          avatar: "/placeholder-user.jpg",
        },
        type: "text",
        content: newMessage,
        timestamp: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
      }
      setMessages([...messages, newMessageObj])
      setNewMessage("")
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
    }
  }
  const handleKeyDown = (e: { key: string; shiftKey: any; preventDefault: () => void }) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }
  useEffect(() => {
    messagesEndRef.current.scrollIntoView({ behavior: "smooth" })
  }, [messages])
  return (
    <div className="flex flex-col h-full max-h-[600px] w-full max-w-[600px] mx-auto bg-background rounded-lg border">
      <div className="flex-1 overflow-auto p-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex items-start gap-4 mb-4 ${message.sender.name === "You" ? "justify-end" : ""}`}
          >
            <Avatar className="shrink-0">
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>{message.sender.name.charAt(0).toUpperCase()}</AvatarFallback>
            </Avatar>
            <div className="grid gap-1">
              <div className="flex items-center gap-2">
                <div className="font-medium">{message.sender.name}</div>
                <div className="text-xs text-muted-foreground">{message.timestamp}</div>
              </div>
              {message.type === "text" && <div className="prose">{message.content}</div>}
              {message.type === "image" && (
                <img src="/placeholder.svg" width={300} height={200} alt="Shared image" className="rounded-md" />
              )}
              {message.type === "file" && (
                <div className="flex items-center gap-2 bg-muted px-3 py-2 rounded-md">
                  <FileIcon className="w-5 h-5 text-muted-foreground" />
                  <div>
                    <div className="font-medium">{message.content.name}</div>
                    <div className="text-xs text-muted-foreground">{message.content.size}</div>
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
        <div ref={messagesEndRef} />
      </div>
      <div className="border-t p-4">
        <div className="relative">
          <Textarea
            placeholder="Type your message..."
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyDown={handleKeyDown}
            className="pr-16 resize-none"
          />
          <Button
            onClick={handleSendMessage}
            variant="ghost"
            size="icon"
            className="absolute top-1/2 -translate-y-1/2 right-2"
          >
            <SendIcon className="w-5 h-5" />
            <span className="sr-only">Send</span>
          </Button>
        </div>
      </div>
    </div>
  )
}

function FileIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
    </svg>
  )
}


function SendIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  )
}
